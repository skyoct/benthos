name: discord
type: input
status: experimental
categories: [ Services, Social ]
summary: Consumes messages posted in a Discord channel.
description: This input works by polling the `/channels/{channel_id}/messages` Discord API endpoint authenticated as a bot using token based authentication. The ID of the newest message consumed is stored in a cache in order to paginate results, ideally this cache should be persisted across restarts in order for the service to resume where it left off.

fields:
  - name: channel_id
    description: A discord channel ID to consume messages from.
    type: string

  - name: bot_token
    description: A bot token used for authentication.
    type: string

  - name: poll_period
    description: The length of time (as a duration string) to wait between each poll for new messages. This field can be set empty, in which case requests are made at the limit set by the rate limit. This field also supports cron expressions.
    type: string
    default: "1m"

  - name: limit
    description: The maximum number of messages to receive in a single request.
    type: int
    default: 100

  - name: cache
    description: A cache resource to use for request pagination, the ID of the last message received will be stored in this cache and used for subsequent requests.
    type: string

  - name: cache_key
    description: The key identifier used when storing the ID of the last message received.
    type: string
    default: last_message_id
    advanced: true

  - name: rate_limit
    description: An optional rate limit resource to restrict API requests with.
    type: string
    default: ""
    advanced: true

mapping: |
  let _ = if this.poll_period == "" && this.rate_limit == "" {
    throw("either a poll_period, a rate_limit, or both must be specified")
  }

  let url_mapping = """meta discord_messages_url = "https://discord.com/api/channels/%v/messages?limit=%v" + if content().length() > 0 {
    "&after="+content().string()
  } else { "" }
  root = ""
  """.format(this.channel_id, this.limit)

  root.generate.interval = this.poll_period
  root.generate.mapping = "root = \"\""

  root.processors = []

  root.processors."-".cache = {
    "resource": this.cache,
    "operator": "get",
    "key": this.cache_key,
  }

  root.processors."-".catch = [] # Don't care if the cache is empty

  root.processors."-".bloblang = $url_mapping

  root.processors."-".http = {
    "url": """${! meta("discord_messages_url") }""",
    "verb": "GET",
    "rate_limit": this.rate_limit,
    "headers": {
      "Authorization": "Bot " + this.bot_token,
    },
  }

  root.processors."-".bloblang = "root = if (this | []).length() == 0 { deleted() } else { this.sort_by(ele -> ele.timestamp.format_timestamp_unix()) }"

  root.processors."-".unarchive = {
    "format": "json_array",
  }

  root.processors."-".cache = {
    "resource": this.cache,
    "operator": "set",
    "key": this.cache_key,
    "value": """${! json("id") }""",
  }

  root.processors."-".catch = [
    {
      "log": {
        "level": "ERROR",
        "message": "Failed to write latest message ID to cache: ${! error() }",
      }
    }
  ]

  root.processors."-".split = {}

metrics_mapping: |
  meta label = $label | ""
  let mpath = meta("path").or("")

  let name_path = if $mpath.has_suffix("processors.7") && this == "processor_received" {
    {
      "name": "input_received",
      "path": $mpath.re_replace(".processors.7$", ""),
    }
  } else if $mpath.has_suffix("processors.3") && this == "processor_error" {
    {
      "name": "input_error",
      "path": $mpath.re_replace(".processors.3$", ""),
    }
  }

  meta path = $name_path.path | deleted()
  root = $name_path.name | deleted()

tests:
  - name: Basic fields
    config:
      channel_id: 1234
      limit: 45
      cache: foocache
      rate_limit: foolimit
      bot_token: foobot

    expected:
      generate:
        interval: '1m'
        mapping: root = ""
      processors:
        - cache:
            resource: foocache
            operator: get
            key: last_message_id

        - catch: []

        - bloblang: |
            meta discord_messages_url = "https://discord.com/api/channels/1234/messages?limit=45" + if content().length() > 0 {
              "&after="+content().string()
            } else { "" }
            root = ""

        - http:
            url: ${! meta("discord_messages_url") }
            verb: GET
            rate_limit: foolimit
            headers:
              Authorization: Bot foobot

        - bloblang: root = if (this | []).length() == 0 { deleted() } else { this.sort_by(ele -> ele.timestamp.format_timestamp_unix()) }

        - unarchive:
            format: json_array

        - cache:
            resource: foocache
            operator: set
            key: last_message_id
            value: ${! json("id") }

        - catch:
          - log:
              level: ERROR
              message: "Failed to write latest message ID to cache: ${! error() }"

        - split: {}
